// The first version is //sw/devtools/SDK/9.5/SDK/MEDIA/HLSL/scene_raytrace.fx
// The second version is https://HlslShaderToy/samples/scene_raytrace.toy

// Checkered.jpg

// #define REFLECTION_ENABLED

static float4 backgroundColor = { 0.1, 0.1, 0.1, 1.0 };

#define kAspect .5135
#define kEpsilon 0.001

struct Ray 
{
    float3 o;   // origin
    float3 d;   // direction
};

static int kDiffuseMtrl = 0;
static int kSpecularMtrl = 1;

struct Sphere 
{
  float3 center;
  float rad2;   // radius^2
  float3 color;
  float3 emission;
  int   mtrlId; // kDiffuseMtrl or kSpecularMtrl
};

#define SQR(N) (N*N)
#define NOBJECTS 10

static Sphere objects[NOBJECTS] =
{
    // left wall
    {
        1e5+1,40.8,81.6,
        SQR(1e5),
        .75,.25,.25,
        0.0, 0.0, 0.0,
        kDiffuseMtrl,
    },
    // right wall
    {
        -1e5+99,40.8,81.6,
        SQR(1e5),
        .25,.25,.75,
        0.0, 0.0, 0.0,
        kDiffuseMtrl,
    },  
    // back wall
    {
        50,40.8, 1e5,
        SQR(1e5),
        .75,.75,.75,
        0.0, 0.0, 0.0,
        kDiffuseMtrl,
    },  
    // front wall
    {
        50,40.8,-1e5+170,
        SQR(1e5),
        0.0, 0.0, 0.0, 
        0.0, 0.0, 0.0,
        kDiffuseMtrl,
    },  
    // bottom wall
    {
        50, 1e5, 81.6,
        SQR(1e5),
        .75,.75,.75,
        0.0, 0.0, 0.0,
        kDiffuseMtrl,
    },  
    // top wall
    {
        50,-1e5+81.6,81.6,
        SQR(1e5),
        .75,.75,.75,
        0.0, 0.0, 0.0,
        kDiffuseMtrl,
    },  
    
    // three balls
    {
        27,16.5,47,
        SQR(16.5),
        1.0, 1.0, 1.0, 1.0,
        0.0, 0.0, 0.0,
        kDiffuseMtrl,
    },
    {
        73,16.5,78,
        SQR(20.5),
        1.0, 1.0, 1.0, 1.0,
        0.0, 0.0, 0.0,
        kDiffuseMtrl,
    },  
    {
        27,16.5,100,
        SQR(10.5),
        1.0, 1.0, 1.0, 1.0,
        0.0, 0.0, 0.0,
        kDiffuseMtrl,
    },
    
    // top light
    {
        50,681.6-.27,81.6,
        SQR(600),
        0, 0, 0,
        12, 12, 12,
        kDiffuseMtrl,
    },  
};

float sphereIntersect(Sphere s, Ray ray)
{
    float3 v = s.center - ray.o;
    float b = dot(v, ray.d);
    float disc = (b*b) - dot(v, v) + s.rad2;

    if (disc<=0) return -1.0; // ray misses

    disc = sqrt(disc);
    float t2 = b + disc;

    if (t2<=kEpsilon) return -1.0; // behind ray origin

    float t1 = b - disc;

    if ((t1>kEpsilon) && (t1<t2))  // return nearest intersection
        return t1;
    else
        return t2;
}

float3 calcSphereNormal(Sphere s, float3 i)
{
    return normalize(i - s.center);
}

// find nearest hit, stored in hitId
// returns intersection point
float3 nearestHit(Ray ray, out int hitId)
{
    float mint = 1e10;
    hitId = -1;
    for(int i=0; i<NOBJECTS; i++) 
    {
        float t = sphereIntersect(objects[i], ray);
        if (t > 0)
        {
            if (t < mint) 
            {
                hitId = i;
                mint = t;
            }
        }
    }
    return ray.o + ray.d*mint;
}

// test for any hit (for shadow rays)
bool anyHit(Ray ray)
{
    for(int i=0; i<NOBJECTS; i++)
    {
        if (sphereIntersect(objects[i], ray) > 0) 
            return true;
    }
    return false;
}

float4 shade(float3 pt, float3 n, float3 v, int hitId)
{
#if 0
    float3 l = normalize(lightPosition - pt);

    // check if shadowed
    Ray shadowray;
    shadowray.o = pt;
    shadowray.d = l;
    bool shadowed = anyHit(shadowray);
#endif
    // lighting
    float4 diff = objects[hitId].color;
    
    return diff;//phong(n, l, v, kShininess, diff, spec);
}

float4 main(float4 pos : SV_POSITION) : SV_TARGET
{    
    Ray cam = {float3(50,52,295.6), normalize(float3(0,-0.042612,-1))};
    
    float3 cx = float3(resolution.x * kAspect / resolution.y, 0, 0);
    float3 cy = normalize(cross(cx, cam.d)) * kAspect;
    float3 d = cx*(pos.x / resolution.x - .5 ) - cy*((pos.y + 4)/ resolution.y - .5) + cam.d;
    // Camera rays are pushed ^^^^^ forward to start in interior
    Ray mainRay = {cam.o+d*140, normalize(d)};
    
    // find nearest hit
    int hitId;
    float3 pt = nearestHit(mainRay, hitId);
    float4 c = backgroundColor;
    
    if (hitId != -1) {

        // return float4(hitId * 0.1, 0, 0, 0);
    
        // shade surface
        float3 n = calcSphereNormal(objects[hitId], pt);
        c = shade(pt, n, mainRay.d, hitId);
        
#ifdef REFLECTION_ENABLED
        // shoot reflection ray
        // level 2 recursion
        float3 r = reflect(mainRay.d, n);
        Ray reflray;
        reflray.o = pt;
        reflray.d = r;
        int hitId2;
        pt = nearestHit(reflray, hitId2);
        if (hitId2 != -1) {
            n = calcSphereNormal(objects[hitId2], pt);
            c += shade(pt, n, reflray.d, hitId2) * objects[hitId].Kr;
        } else {
            c += backgroundColor;
        }
#endif
    }

    return c;
}

